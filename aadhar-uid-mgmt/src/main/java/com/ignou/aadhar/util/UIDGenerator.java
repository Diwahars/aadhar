/*
 * Aadhar UID Management.
 *
 * Copyright (C) 2012 Deepak Shakya
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.ignou.aadhar.util;

import com.ignou.aadhar.constants.Constants;
import com.ignou.aadhar.constants.UIDTypes;

/**
 * Aadhar UID generator. Generates the UIDs and validates them as well.
 * @author Deepak Shakya
 *
 */
public final class UIDGenerator {

    /**
     * Generates the UID for the System. The UIDType argument specified which
     * type UID needs to be generated.
     * @param type UIDType for which UID is generated.
     * @return The generated UID.
     */
    public static String generateUID(UIDTypes type) {

        StringBuilder generatedUID = new StringBuilder();

        /* Check if the valid type was provided or not */
        if (UIDTypes.CITIZEN.equals(type)
                || UIDTypes.ORGANIZATIONS.equals(type)) {

            /* Get the current timestamp in milliseconds */
            generatedUID.append(System.currentTimeMillis());

            /* We will replace the first two positions of the timestamp with
             * zeros as that long UID will never be generated by the system.
             */
            generatedUID.replace(0, 2, "00");

            /* Let's now generate the Verhoeff digit for checksum and append the
             * same to the UID. Also, we will prepend the UIDType identifier to
             * the generated UID.
             */
            String verhoeffDigit = Verhoeff.GenerateVerhoeffDigit(generatedUID.toString());
            generatedUID.insert(0, type.getCode()).append(verhoeffDigit);
        }

        return generatedUID.toString();
    }

    /**
     * Validates whether the uid provided is valid or not. This check the
     * Verhoeff checksum digit value for the UID.
     * @param uid UID which needs to be validated.
     * @return TRUE if the UID provided is valid and error free.
     */
    public static boolean validateUID(String uid) {

        if ((uid == null) || ("".equals(uid.trim())
                || uid.trim().length() != Constants.UID_LENGTH)) {
            return false;
        }

        return Verhoeff.ValidateVerhoeff(uid.substring(1));
    }
}
